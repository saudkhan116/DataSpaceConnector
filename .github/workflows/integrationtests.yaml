name: Integration Tests

on:
  push:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  Azure-Storage-Integration-Test:
    runs-on: ubuntu-latest

    services:
      azurite:
        image: mcr.microsoft.com/azure-storage/azurite
        ports:
          - 10000:10000
        env:
          AZURITE_ACCOUNTS: account1:key1;account2:key2

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Azure Storage Tests
        run: ./gradlew -p extensions/azure test -DincludeTags="AzureStorageIntegrationTest"

  Check-Cosmos-Key:
    runs-on: ubuntu-latest
    steps:
      - id: has-cosmos-key
        env:
          HAS_COSMOS_KEY: ${{ secrets.COSMOS_KEY }}
        if: "${{ env.HAS_COSMOS_KEY != '' }}"
        run: echo "::set-output name=defined::true"
    outputs:
      has-cosmos-key: ${{ steps.has-cosmos-key.outputs.defined }}

  Azure-CosmosDB-Integration-Test:
    # run only if COSMOS_KEY is present
    needs: [ Check-Cosmos-Key ]
    if: needs.Check-Cosmos-Key.outputs.has-cosmos-key == 'true'
    runs-on: ubuntu-latest

    env:
      COSMOS_KEY: ${{ secrets.COSMOS_KEY }}
      COSMOS_URL: ${{ secrets.COSMOS_URL }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Azure CosmosDB Tests
        run: ./gradlew -p extensions/azure/cosmos test -DincludeTags="AzureCosmosDbIntegrationTest"

  Aws-Integration-Test:
    runs-on: ubuntu-latest

    env:
      RUN_INTEGRATION_TEST: true
      S3_ACCESS_KEY_ID: root
      S3_SECRET_ACCESS_KEY: password

    services:
      minio:
        image: bitnami/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: root
          MINIO_ROOT_PASSWORD: password

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: AWS S3 Tests
        run: ./gradlew -p extensions/aws/s3 test -DincludeTags="AwsS3IntegrationTest"

      - name: AWS Data Plane S3 Tests
        run: ./gradlew -p extensions/aws/data-plane-s3 test -DincludeTags="AwsS3IntegrationTest"

  Daps-Integration-Test:
    runs-on: ubuntu-latest

    steps:
      - name: reset permissions to permit checkout (because the omejdn volumes)
        run: sudo chown -R $USER:$USER ${{ github.workspace }}

      - uses: actions/checkout@v2

      - run: docker run -d --rm -p 4567:4567 -v ${{ github.workspace }}/extensions/iam/daps/src/test/resources/config:/opt/config -v ${{ github.workspace }}/extensions/iam/daps/src/test/resources/keys:/opt/keys ghcr.io/fraunhofer-aisec/omejdn-server:1.3.1

      - uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Daps Integration Tests
        run: ./gradlew -p extensions/iam/daps test -DincludeTags="DapsIntegrationTest"

  End-To-End-Tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: "End to End Integration Tests"
        run: ./gradlew test -DincludeTags="EndToEndTest"

      - name: "Publish Gatling report"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Gatling reports
          path: '**/build/reports/gatling/**'

  Component-Tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: "Component Tests"
        run: ./gradlew test -DincludeTags="ComponentTest"

  Micrometer-Integration-Tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Download opentelemetry javaagent.
        run: wget -q https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v1.12.0/opentelemetry-javaagent.jar
      - name: Micrometer Integration Tests.
        run: ./gradlew -p core/micrometer test -DincludeTags="OpenTelemetryIntegrationTest"
